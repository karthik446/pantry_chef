# generated by datamodel-codegen:
#   filename:  schema.json
#   timestamp: 2025-02-09T06:32:47+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional, Dict, Any
from uuid import UUID

from pydantic import BaseModel, Field
from datetime import datetime


class WorkflowType(Enum):
    recipe_workflow_full = "recipe_workflow_full"


class WorkflowPayload(BaseModel):
    search_query: str = Field(
        ...,
        description="Search query for recipe search (required for recipe_workflow_full).",
    )
    number_of_recipes: Optional[int] = Field(
        None, description="Number of recipes to search for (optional, default is 10)."
    )


class WorkflowInitiateMessage(BaseModel):
    workflow_id: Optional[UUID] = Field(
        None,
        description="Unique identifier for the workflow instance.  This can be pre-generated by the API or generated by the RecipeAgentService if not provided.",
    )
    workflow_type: WorkflowType = Field(
        ...,
        description="Type of workflow to initiate. For MVP, only 'recipe_workflow_full' is supported.",
    )
    workflow_payload: WorkflowPayload = Field(
        ..., description="Payload data specific to the workflow type."
    )


class EventType(Enum):
    recipe_search_duration = "recipe_search.duration"


class Metadata(BaseModel):
    search_query: str = Field(
        ..., description="The search query used for the recipe search."
    )
    workflow_id: UUID = Field(
        ..., description="The ID of the workflow that triggered the event."
    )


class MetricsEvent(BaseModel):
    event_type: str = Field(
        ...,
        description="Type of event being measured (e.g., 'recipe_search.duration', 'api.request.latency').",
    )
    duration: Optional[float] = Field(
        None, description="Duration of the event in seconds (if applicable)."
    )
    count: Optional[int] = Field(
        None, description="Count of the event (if applicable)."
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description="Additional metadata associated with the event (key-value pairs).",
    )
    timestamp: datetime = Field(
        ..., description="Timestamp of when the event occurred (ISO 8601 format)."
    )
